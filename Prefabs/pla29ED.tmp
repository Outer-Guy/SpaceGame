[gd_scene load_steps=5 format=3 uid="uid://deq633jirwd41"]

[ext_resource type="Texture2D" uid="uid://b8433osba5qn4" path="res://icon.svg" id="1_xosu4"]

[sub_resource type="GDScript" id="GDScript_v5a8b"]
script/source = "extends CharacterBody2D

@export_category(\"Movement\")
@export var MAXSPEED: float = 300
@export var ACCELERATION: float = 0.01
@export var SPEEDPOWER: float = 2
@export_category(\"HookPhysics\")
@export var reelingMaxForce: float  = 100
@export_range(0,1) var reelingLerp: float  = 0.75
@export var reelingAcceleration: float  = 0.75
@export var DistanceStrength: float  = 1
@export var minDistanceRope: float  = 4
@export_range(0,1) var RopeTension: float  = 0.75

var TRYHOOK : bool = false
var CLICKPOSITION: Vector2
var tempD: Dictionary
var RelativeHookAngle : Vector2
var AcSpeed : float

func _ready() -> void:
	RelativeHookAngle = Vector2.RIGHT
	pass # Replace with function body.
	


func _physics_process(_delta: float) -> void:
	ConstantSpeed()
	if TRYHOOK:
		HookLogic()
		queue_redraw()
	
	transform = transform.orthonormalized()
	move_and_slide()
	look_at(position+velocity)
	
#Handles touch input
func _unhandled_input(event: InputEvent) -> void:
	if event is InputEventScreenTouch:
		
		TRYHOOK = event.pressed
		CLICKPOSITION = event.position

#Handles Hook Physics
func HookLogic() -> void:
#region RaycastToTouch
	var space_state: PhysicsDirectSpaceState2D = get_world_2d().direct_space_state
	var query: PhysicsRayQueryParameters2D = PhysicsRayQueryParameters2D.create(global_position, CLICKPOSITION)
	var result: Dictionary = space_state.intersect_ray(query)
	tempD = result
#endregion
	
	if !result.is_empty():
		var HookDif : Vector2 = tempD.get(\"collider\").position - position
		var vPerpendicular : Vector2  = Vector2(-HookDif.y,HookDif.x).normalized()
		var vPerpendicularVelocity : Vector2 = (velocity.dot(vPerpendicular)/vPerpendicular.length_squared())* vPerpendicular
		RelativeHookAngle = vPerpendicularVelocity
		#Cast velocity to perpendicular force
		var PerpendicularForce : Vector2 = lerp(velocity, vPerpendicularVelocity,RopeTension)
		PerpendicularForce -= velocity
		velocity += PerpendicularForce
		
		#Grapple force
		var TargetSpeed : Vector2 = reelingAcceleration * HookDif - velocity
		TargetSpeed += ((HookDif.length() - minDistanceRope) * HookDif.normalized()) * DistanceStrength
		var Movement : Vector2 = lerp(velocity, TargetSpeed, reelingLerp)
		Movement = clamp(Movement.length(),0,reelingMaxForce) * Movement.normalized()
		velocity += Movement
		#print(\"HookDif: \", HookDif, \"vPerpendicular: \", vPerpendicular, \"vPerpendicularVelocity: \", vPerpendicularVelocity,  \"RelativeHookAngle: \", RelativeHookAngle)
		#Vector2 TargetSpeed = 
	else:
		TRYHOOK = false
		RelativeHookAngle = velocity.normalized() 
		
	

func ConstantSpeed() -> void:
	var SPEEDFORCE : float = ((MAXSPEED - velocity.length()) * ACCELERATION) ** SPEEDPOWER #+ velocity.length()
	#velocity = Vector2(SPEEDFORCE*cos(RelativeHookAngle),SPEEDFORCE* sin(RelativeHookAngle))
	#velocity = (velocity.length() + SPEEDFORCE) * lerp(velocity.normalized(),RelativeHookAngle.normalized(),RopeTension
	velocity +=  SPEEDFORCE * RelativeHookAngle.normalized()


func _draw() -> void:
	if !tempD.is_empty():
		draw_line(Vector2.ZERO, tempD.get(\"collider\").position - position,Color.WHITE,-1)
		#print(global_position,tempD.get(\"collider\").position)
"

[sub_resource type="CircleShape2D" id="CircleShape2D_fbmn4"]
radius = 67.42

[sub_resource type="GDScript" id="GDScript_8cksp"]
resource_name = "GraphicsLogic"
script/source = "extends Sprite2D

func _physics_process(_delta: float) -> void:
	pass
	#look_at(position + get_parent().velocity)
"

[node name="Player" type="CharacterBody2D"]
script = SubResource("GDScript_v5a8b")
RopeTension = 0.121

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
scale = Vector2(0.3, 0.3)
shape = SubResource("CircleShape2D_fbmn4")

[node name="Sprite2D" type="Sprite2D" parent="."]
scale = Vector2(0.3, 0.3)
texture = ExtResource("1_xosu4")
script = SubResource("GDScript_8cksp")
