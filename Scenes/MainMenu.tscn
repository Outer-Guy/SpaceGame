[gd_scene load_steps=6 format=3 uid="uid://bi0m7wrpvd08l"]

[ext_resource type="PackedScene" uid="uid://debusc5bdv2kj" path="res://Prefabs/OptionsMenu.tscn" id="1_0oto3"]
[ext_resource type="PackedScene" uid="uid://dc0at65pqjggx" path="res://Prefabs/server_browser.tscn" id="2_1skox"]

[sub_resource type="GDScript" id="GDScript_ikndx"]
resource_name = "MainMenu"
script/source = "extends Control

@export var compression_type : ENetConnection.CompressionMode = ENetConnection.CompressionMode.COMPRESS_NONE

@export var game_hosting_port : int = GameManager.port + 2
@export var should_log : bool = false

var peer : ENetMultiplayerPeer

var username_line : LineEdit
var lobby_name_line : LineEdit
var address_line : LineEdit
var username_warning : Label
var address_checkbox : CheckBox


func _ready() -> void:
	multiplayer.peer_connected.connect(on_peer_connected)
	multiplayer.peer_disconnected.connect(on_peer_disconnected)
	multiplayer.connected_to_server.connect(on_connected_to_server)
	multiplayer.connection_failed.connect(on_connection_failed)
	PlayerData.on_all_data_set.connect(handle_scene_transition)
	
	$MainMenu/BottomFrame/ServerBrowser.on_join_server.connect(on_join_server)
	
	username_line = $MainMenu/FirstLine/UsernameInput/UsernameLine
	username_warning = $MainMenu/WariningLabel
	lobby_name_line = $MainMenu/FirstLine/LobbyNameInput/LobbyNameLine
	address_line = $MainMenu/ServerAddressInfo/LineEdit
	address_checkbox = $MainMenu/ServerAddressInfo/Checkbox

# On every connection and disconnection, server and client
func on_peer_connected(id : int) -> void:
	if should_log : print(\"Player Connected: id = \" + str(id))

func on_peer_disconnected(id : int) -> void:
	if should_log : print(\"Player Disconnected: id = \" + str(id))

# On succesful or failed connection, only client
func on_connected_to_server() -> void:
	if should_log : print(\"Succesfull connection\")
	
	PlayerData.on_player_connected.rpc_id(1, multiplayer.get_unique_id(), username_line.text)

func on_connection_failed() -> void:
	if should_log : print(\"Failed to connect\")

func handle_scene_transition() -> void :
	PlayerData.set_gamestate.rpc(PlayerData.local.id, PlayerData.GAMESTATE.LOBBY)
	GameManager.load_scene(\"res://Scenes/MultiplayerLobby.tscn\")

func username_not_null() -> bool :
	if(username_line.text == \"\"): 
		username_warning.show()
		return false
	else :
		username_warning.hide()
		return true

func _on_start_host_button_down() -> void:
	if !username_not_null() : return
	PlayerData.create_player_data(multiplayer.get_unique_id(), username_line.text)
	create_server(should_log)
	handle_scene_transition()

func _on_start_client_button_down() -> void:
	if !username_not_null() : return
	create_client(get_address_from_line(), should_log)

func on_join_server(ip : String) -> void :
	create_client(ip, should_log)

func _on_single_player_button_down() -> void:
	if !username_not_null() : return
	create_server(should_log)
	PlayerData.create_player_data(multiplayer.get_unique_id(), username_line.text)
	PlayerData.set_gamestate(1, PlayerData.GAMESTATE.PLAYING)
	GameManager.load_scene(\"res://Scenes/GamePlayTest.tscn\")

func create_server(log_active : bool = false) -> void :
	peer = ENetMultiplayerPeer.new()
	
	var error : Error = peer.create_server(game_hosting_port, GameManager.max_players)
	if error:
		if log_active : printerr(\"Failed to Host at port: \" + str(game_hosting_port))
		if log_active : printerr(error)
		return
	
	peer.get_host().compress(compression_type)
	multiplayer.set_multiplayer_peer(peer)
	
	PlayerData.setup_broadcast(get_lobby_name_from_line())
	
	if log_active : print(\"Server Started at port \" + str(game_hosting_port))

func create_client(ip : String, log_active : bool = false) -> void :
	peer = ENetMultiplayerPeer.new()
		
	var error : Error = peer.create_client(ip, game_hosting_port)
	if error:
		if log_active : print(\"Failed to connect to \" + ip)
		return
		
	peer.get_host().compress(compression_type)
	multiplayer.set_multiplayer_peer(peer)
	if log_active : print(\"Connection sent to: \" + ip)
	
	PlayerData.clean_up_broadcasting()

func get_lobby_name_from_line() -> String :
	if lobby_name_line.text != \"\":
			return lobby_name_line.text
	return username_line.text + \"'s Game\"

func get_address_from_line() -> String :
	if address_checkbox.button_pressed && address_line.text != \"\":
		return address_line.text
	return address_line.placeholder_text


func _on_debug_timer_timeout() -> void:
	if OS.get_cmdline_args().size() > 2 :
		var arg : String = OS.get_cmdline_args()[2]
		match arg :
			\"host\":
				_on_start_host_button_down()
			\"client\":
				PlayerData.setup_listener()
"

[sub_resource type="GDScript" id="GDScript_o8gq4"]
script/source = "extends LineEdit

func _ready() -> void:
	if OS.get_cmdline_args().size() > 1 :
		self.text = OS.get_cmdline_args()[1]
		DisplayServer.window_set_title(OS.get_cmdline_args()[1])
	else :
		self.text = \"Guest\" + str(RandomNumberGenerator.new().randi_range(1,999))
"

[sub_resource type="GDScript" id="GDScript_wliye"]
script/source = "extends Control

func _on_checkbox_toggled(toggled_on: bool) -> void:
	$LineEdit.visible = toggled_on
	$AddressLabel.visible = toggled_on
"

[node name="Control" type="Control"]
layout_mode = 3
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
mouse_filter = 2
script = SubResource("GDScript_ikndx")
should_log = true

[node name="MainMenu" type="VBoxContainer" parent="."]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
alignment = 1

[node name="FirstLine" type="HBoxContainer" parent="MainMenu"]
custom_minimum_size = Vector2(0, 40)
layout_mode = 2
alignment = 1

[node name="UsernameInput" type="HBoxContainer" parent="MainMenu/FirstLine"]
custom_minimum_size = Vector2(500, 0)
layout_mode = 2
alignment = 1

[node name="UsernameLabel" type="Label" parent="MainMenu/FirstLine/UsernameInput"]
custom_minimum_size = Vector2(100, 0)
layout_mode = 2
text = "Username:"
horizontal_alignment = 1
vertical_alignment = 1

[node name="UsernameLine" type="LineEdit" parent="MainMenu/FirstLine/UsernameInput"]
custom_minimum_size = Vector2(350, 0)
layout_mode = 2
script = SubResource("GDScript_o8gq4")

[node name="LobbyNameInput" type="HBoxContainer" parent="MainMenu/FirstLine"]
custom_minimum_size = Vector2(500, 0)
layout_mode = 2
alignment = 1

[node name="Label" type="Label" parent="MainMenu/FirstLine/LobbyNameInput"]
custom_minimum_size = Vector2(100, 0)
layout_mode = 2
text = "Lobby Name:"

[node name="LobbyNameLine" type="LineEdit" parent="MainMenu/FirstLine/LobbyNameInput"]
custom_minimum_size = Vector2(350, 0)
layout_mode = 2

[node name="WariningLabel" type="Label" parent="MainMenu"]
visible = false
custom_minimum_size = Vector2(480, 0)
layout_mode = 2
size_flags_horizontal = 0
text = "Username cannot be empty."
horizontal_alignment = 2
vertical_alignment = 2

[node name="ServerAddressInfo" type="HBoxContainer" parent="MainMenu"]
custom_minimum_size = Vector2(0, 40)
layout_mode = 2
alignment = 1
script = SubResource("GDScript_wliye")

[node name="Checkbox" type="CheckBox" parent="MainMenu/ServerAddressInfo"]
custom_minimum_size = Vector2(200, 0)
layout_mode = 2
text = "Manual Address"
alignment = 1
icon_alignment = 1

[node name="AddressLabel" type="Label" parent="MainMenu/ServerAddressInfo"]
visible = false
custom_minimum_size = Vector2(80, 0)
layout_mode = 2
text = "Address:"
horizontal_alignment = 1

[node name="LineEdit" type="LineEdit" parent="MainMenu/ServerAddressInfo"]
visible = false
custom_minimum_size = Vector2(150, 0)
layout_mode = 2
placeholder_text = "192.168.0.161"

[node name="BottomFrame" type="HBoxContainer" parent="MainMenu"]
layout_mode = 2
alignment = 1

[node name="Buttons" type="VBoxContainer" parent="MainMenu/BottomFrame"]
custom_minimum_size = Vector2(0, 350)
layout_mode = 2
size_flags_horizontal = 3
alignment = 1

[node name="SinglePlayer" type="Button" parent="MainMenu/BottomFrame/Buttons"]
custom_minimum_size = Vector2(300, 100)
layout_mode = 2
size_flags_horizontal = 4
text = "SinglePlayer"

[node name="StartHost" type="Button" parent="MainMenu/BottomFrame/Buttons"]
custom_minimum_size = Vector2(300, 100)
layout_mode = 2
size_flags_horizontal = 4
text = "Start Host"

[node name="StartClient" type="Button" parent="MainMenu/BottomFrame/Buttons"]
custom_minimum_size = Vector2(300, 100)
layout_mode = 2
size_flags_horizontal = 4
text = "Join as Client"

[node name="ServerBrowser" parent="MainMenu/BottomFrame" instance=ExtResource("2_1skox")]
layout_mode = 2
size_flags_horizontal = 3
size_flags_stretch_ratio = 2.0

[node name="Control" type="Control" parent="MainMenu/BottomFrame"]
layout_mode = 2
size_flags_horizontal = 3
size_flags_stretch_ratio = 0.1

[node name="OptionsMenu" parent="." instance=ExtResource("1_0oto3")]
layout_mode = 1

[node name="DebugTimer" type="Timer" parent="."]
wait_time = 0.2
one_shot = true
autostart = true

[connection signal="toggled" from="MainMenu/ServerAddressInfo/Checkbox" to="MainMenu/ServerAddressInfo" method="_on_checkbox_toggled"]
[connection signal="button_down" from="MainMenu/BottomFrame/Buttons/SinglePlayer" to="." method="_on_single_player_button_down"]
[connection signal="button_down" from="MainMenu/BottomFrame/Buttons/StartHost" to="." method="_on_start_host_button_down"]
[connection signal="button_down" from="MainMenu/BottomFrame/Buttons/StartClient" to="." method="_on_start_client_button_down"]
[connection signal="timeout" from="DebugTimer" to="." method="_on_debug_timer_timeout"]
